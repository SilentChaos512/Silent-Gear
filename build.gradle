plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

version = mod_version
group = mod_group_id
var archiveNameNeo = "${repo_name}-${minecraft_version}-neoforge"
base {
    archivesName = archiveNameNeo
}

System.out.println("Version: ${version}")
System.out.println("Archive: ${base.archivesName}")

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    def gpr_creds = {
        username = property('gpr.username')
        password = property('gpr.token')
    }

    mavenLocal()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = uri("https://maven.pkg.github.com/silentchaos512/silent-gear")
        credentials gpr_creds
    }
    maven {
        url = uri("https://maven.pkg.github.com/silentchaos512/silentlib")
        credentials gpr_creds
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // EMI
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        // Caelus
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curios
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation("net.silentchaos512:silent-lib-1.21-neoforge:${project.silentlib_version}")

    // JEI
    if (project.hasProperty("jei_version")) {
        // compile against the JEI API but do not include it at runtime
        compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
        compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
        // at runtime, use the full JEI jar for NeoForge
//        runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    }

    // EMI
    if (project.hasProperty("emi_version")) {
        compileOnly("dev.emi:emi-neoforge:${emi_version}:api")
        runtimeOnly("dev.emi:emi-neoforge:${emi_version}")
    }

    // Curios
    dependencies {
        implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+1.21"
    }

    // Caelus
    dependencies {
        runtimeOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}+${minecraft_version}"
        compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}+${minecraft_version}:api"
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version, neo_version_range: neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors            : mod_authors, mod_description: mod_description,
            issue_tracker_url      : issue_tracker_url, display_url: display_url,
            silentlib_version_range: silentlib_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

if (project.hasProperty('curseforge.apiKey')) {
    curseforge {
        apiKey = property('curseforge.apiKey')
        project {
            id = project.cf_project_id
            changelog = file(project.cf_changelog_filename)
            releaseType = project.release_type
            addGameVersion(project.minecraft_version)
            mainArtifact(jar) {
            }
        }
    }
}

if (project.hasProperty('modrinth_token')) {
    modrinth {
        token = property('modrinth.token')
        projectId = project.mr_project_id
        versionNumber = project.mod_version
        versionType = project.release_type
        uploadFile = jar
        gameVersions = [project.minecraft_version]
        loaders = ["neoforge"]
        changelog = new File("CHANGELOG.md").text
        dependencies = {
            required.project "silent-lib"
        }
    }
}

// GPR/Maven publishing

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/silentchaos512/${project.repo_name}")
            credentials {
                username = property('gpr.username')
                password = property('gpr.token')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = archiveNameNeo
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}
